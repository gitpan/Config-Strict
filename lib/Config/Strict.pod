=head1 NAME

Config::Strict - Add strict typing to your configuration management

=head1 VERSION

0.01 (alpha release)

=head1 SYNOPSIS

    use Config::Strict;
    use Declare::Constraints::Simple -All;               # For custom checks

    # A comprehensive example
    my $config = Config::Strict->new( {
        name   => "Example",                             # Type system name
        params => {                                      # Parameter types & names
            Bool   => [ qw( my_bool1 my_bool2 ) ],       # Multiple parameters
            Int    => 'my_i',                            # Single parameter
            Num    => 'my_n',
            Str    => [ qw( my_str1 my_str2 ) ],
            Regexp => 'my_re',
            ArrayRef => 'my_aref',
            HashRef  => 'my_href',
            Enum   => { my_enum => [ qw( v1 v2 ), undef ] },
            Custom   => {                                # Custom routines
                # Bare coderef:
                my_pos1 => sub { $_[ 0 ] > 0 },          # Positive number
                # Declare::Constraints::Simple code profiles:
                my_pos2 => And( IsNumber, Matches( qr/^[^-]+$/ ) ),
                                                         # Equivalent to my_pos1
                my_nest => IsA( 'Config::Strict' ),      # Nested configuration
            }
        },
        required => [ qw( my_bool1 my_n ) ],             # Required parameters
        defaults => {                                    # Default values
            my_bool1    => 1,
            my_str2     => 'str',
            my_enum     => 'e2',
            my_n        => -1.1,
            my_pos1     => 1_000,
            my_pos1     => 3.3
        },
    } );
    
    # Access and change the data
    
    # Retrieve a single value
    $config->get_param( 'my_n' );
    
    # Retrieve a list of values
    $config->get_param( qw( my_bool1 my_str2 ) );
    
    # Set multiple parameters
    $config->set_param( 'my_pos1' => 1, 'my_pos2' => 2 );
    
    # Dies
    $config->set_param( 'my_pos2' => -5 );      # my_pos2 must be positive

=head1 DESCRIPTION

Config::Strict leaps on the back of L<Declare::Constraints::Simple> to make it
easy to add strict parameter typing to your configuration management system.

A typical workflow would be:

=over 4

=item 1. Use some configuration module to parse a configuration file.

=item 2. Construct a C<Config::Strict> type system for your configuration parameters.

=item 3. Load the parsed configuration hash into the Config::Strict object using C<set_param>.

=item 4. Use C<get_param> in your program to access configuration values.

=item 5. Write any changes back to disk using some module.

=back

See L<Declare::Constraints::Simple::Library> for an index to available 
constraints and the parent documentation for defining your own constraints 
and scoping.

This is a L<Moose> module.

=head1 CONSTRUCTING A TYPE SYSTEM

Declare the type system during construction:

=head2 Config::Strict->new( \%opts )

C<%opts> is a multi-level hash with the following top-level keys:

=over 4

=item B<name> (Required)

Points to the name of the type system. This name is appended to 
"Config::Strict::Params::" for proper namespacing of the Moose subtype (the
parent Moose type is HashRef). See L<Moose::Meta::TypeConstraint> for more
details.

=item B<params> (Required)

Points to the hash of parameter types and names, where the keys are the 
built-in Config::Strict types (more below). 

The values are either a single parameter name or an arrayref of parameter names,
with the exception of the special types C<Enum> and C<Custom> which point to a 
uniquely defined hashref.

B<Parameter Types And Values:>

=over 4

=item B<Bool>

Those parameters which must take the value 0 or 1.

=item B<Int>

Integer parameters.

=item B<Num>

Generic number parameters.

=item B<Str>

Generic string parameters.

=item B<Enum>

Enumerated parameters. The C<Enum> key points to a hashref with
C<$parameter_name =E<gt> $values> pairs, where C<$values> is an arrayref of 
valid values for the enum C<$parameter_name>.

=item B<Regexp>

Compiled regexp parameters (with C<qr//>).

=item B<ArrayRef>

Generic list parameters.

=item B<HashRef>

Generic hash parameters.

=item B<CodeRef>

Generic code parameters.

=item B<Custom>

Custom validation code. The C<Custom> key points to a hashref with
C<$parameter_name =E<gt> $coderef> pairs, where C<$coderef> is an anonymous
subroutine that validates a single argument and returns true or false (1 or 0)
if the given value is a valid one for that parameter.

C<$coderef> can be either literal (C<sub { my $val = $_[0]; ... }>) or a 
L<Declare::Constraints::Simple> "profile." These code profiles will actually
return a L<Declare::Constraints::Simple::Result> which evaluate properly in 
boolean context but give more information (see the documentation for details).

=back

=item B<required> (Optional)

Points to a list of parameter names that must have valid values at all times.
These parameters must also be given a default value.

=item B<defaults> (Optional)

Points to a hash of default values to any number of parameters. Those parameters
listed in C<required> I<must> be present in this section.

=back

=head1 GETTING AND SETTING PARAMETER VALUES

=head2 $obj->get_param( parameter, parameter, ... )

Returns the list of values corresponding to each C<parameter>.

=head2 $obj->set_param( parameter => value, parameter => value, ... )

Sets each key-value configuration pair.

=head1 OTHER METHODS

=head2 $obj->param_exists( $param )

Returns true if C<$param> can be get/set.

=head2 $obj->param_set( $param )

Returns true if C<$param> has been set.

=head2 $obj->param_validator( $param )

Returns the coderef used to validate C<$param>. It takes a single argument and 
returns true if the passed argument would be a valid value for C<$param>.

=head2 $obj->all_params()

Returns the list of all parameter names.

=head1 EXTENDING THE DEFAULTS

There are several ways to make your type system even more strict than the
provided parameter types:

=over 4

=item 1. Using the C<Custom> key and combining any number of 
C<Declare::Constraints::Simple> routines, and/or your own.

=item 2. Using the C<Custom> key and defining your own validation coderefs.

=item 3. Subclassing Config::Strict and augmenting the C<_get_check> and C<_set_check>
validation methods to add your own general validation semantics. These methods
are executed before C<get_param> and C<set_param>, respectively, and receive the
same arguments in C<@_>. 

See also L<Moose::Manual::MethodModifiers/"INNER AND AUGMENT">.

=back

B<TODO>

=head1 SEE ALSO

L<Declare::Constraints::Simple>

=head1 CAVEATS

This is an alpha release - the API is subject to change.


=head1 AUTHOR

Blake Willmarth

bwillmarth at gmail.com

=head1 BUGS

Please report any bugs or feature requests to C<bug-config-strict at rt.cpan.org>, or through
the web interface at L<http://rt.cpan.org/NoAuth/ReportBug.html?Queue=Config-Strict>.  I will be notified, and then you'll automatically be notified of progress on your bug as changes are made.

=head1 LICENSE AND COPYRIGHT

Copyright 2010 Blake Willmarth.

This program is free software; you can redistribute it and/or
modify it under the terms of either:

=over 4

=item * the GNU General Public License as published by the Free
Software Foundation; either version 1, or (at your option) any
later version, or

=item * the Artistic License version 2.0.

=back

=cut